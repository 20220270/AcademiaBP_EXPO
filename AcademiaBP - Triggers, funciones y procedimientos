-- triggers

-- trigger para actualizar las existencias de los productos
DELIMITER //
CREATE TRIGGER actualizar_existencias_detalle
AFTER INSERT ON tb_detalles_compras
FOR EACH ROW
BEGIN
UPDATE tb_productos SET existencias_producto = existencias_producto - NEW.cantidad_producto
WHERE id_producto = NEW.id_producto;
END
//
DELIMITER ;

-- trigger para actualizar las cuotas pendientes de la mensualidad
DELIMITER //

CREATE TRIGGER actualizar_cuotas_pendientes
AFTER INSERT ON tb_detalles_pagos
FOR EACH ROW
BEGIN
    -- Actualizar las cuotas pendientes
    UPDATE tb_pagos
    SET cuotas_pendientes = cuotas_pendientes - 1
    WHERE id_pago = NEW.id_pago;
END;
//
DELIMITER ;




------------------------------------------------------------------------------------------------

-- Procedimiento almacenado para el manejo de devoluciones de productos
DELIMITER //

CREATE PROCEDURE devolucion_producto( -- se crea el procedimiento, mandando dos parametros, el detalle del producto y la cantidad a devolver
    IN id_detalle_in INT,
    IN nueva_cantidad INT
)
BEGIN
    DECLARE producto_id INT; -- declaramos las variables para cada elemento, el producto, la cantidad devuelta, el precio que tiene ese producto devuelto, el total que se iba 
    -- a pagar y el total a pagar nuevamente calculado
    DECLARE cantidad_devuelta INT;
    DECLARE precio_unitario DECIMAL(8,2);
    DECLARE total_anterior DECIMAL(10,2);
    DECLARE nuevo_total DECIMAL(10,2);
    
    -- Obtenemos el ID del producto, la cantidad devuelta y el precio unitario del detalle del pedido
    SELECT id_producto, cantidad_producto, total_a_pagar INTO producto_id, cantidad_devuelta, precio_unitario
    FROM tb_detalles_compras
    WHERE id_detalle_compra = id_detalle_in;
    
    -- Obtenemos el total anterior de la compra
    SELECT calcular_total_compra(id_compra) INTO total_anterior
    FROM tb_detalles_compras
    WHERE id_detalle_compra = id_detalle_in;
    
    -- Actualizamos la cantidad en la tabla de productos
    UPDATE tb_productos
    SET existencias_producto = existencias_producto + (cantidad_devuelta - nueva_cantidad)
    WHERE id_producto = producto_id;
    
    -- Actualizamos la cantidad en el detalle del pedido
    UPDATE tb_detalles_compras
    SET cantidad_producto = nueva_cantidad
    WHERE id_detalle_compra = id_detalle_in;
    
    -- Recalculamos el nuevo total de la compra
    SET nuevo_total = total_anterior - (cantidad_devuelta - nueva_cantidad) * precio_unitario;
    
    -- Actualizamos el nuevo total en la tabla de compras
    UPDATE tb_compras
    SET total_a_pagar = nuevo_total
    WHERE id_compra = (SELECT id_compra FROM tb_detalles_compras WHERE id_detalle_compra = id_detalle_in);
    
END
//
DELIMITER ;



-----------------------------------------------------------------------------------------------------------------
-- funcion

-- funcion para calcular el total a pagar en una compra

DELIMITER //

CREATE FUNCTION calcular_total_compra(
    orden_id INT
)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total DECIMAL(10, 2);
    
    SELECT SUM(total_a_pagar) INTO total -- Calcula la suma de total_a_pagar para todas las filas en tb_detalles_ordenes con el orden_id dado
    FROM tb_detalles_compras
    WHERE id_orden = orden_id;
    
    RETURN COALESCE(total, 0); -- Devuelve el total calculado. Se utiliza COALESCE para manejar el caso donde no se encuentran filas, devolviendo 0 en ese caso
END
//
DELIMITER ;
