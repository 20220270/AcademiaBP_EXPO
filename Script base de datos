DROP DATABASE IF EXISTS academiabp_db;

CREATE DATABASE academiabp_db;

USE academiabp_db;

-- niveles de usuario
CREATE TABLE tb_niveles_administradores(
id_nivel INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nivel  VARCHAR(100) NOT NULL
);

-- administradores
CREATE TABLE tb_administradores(
id_administrador INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nombre_admistrador  VARCHAR(50) NOT NULL,
apellido_administrador VARCHAR(50) NOT NULL,
dui_administrador VARCHAR(10) NOT NULL,
correo_administrador VARCHAR(100) NOT NULL,
telefono_administrador VARCHAR(9) NOT NULL,
alias_administrador VARCHAR(100) NOT NULL,
clave_administrador VARCHAR(100) NOT NULL,
fecha_registro DATE NOT NULL DEFAULT NOW(),
foto_administrador VARCHAR(200) NULL,
id_nivel INT NOT NULL
);

-- restricciones de administradores
ALTER TABLE tb_administradores ADD CONSTRAINT fk_nivel_admin FOREIGN KEY(id_nivel) REFERENCES tb_niveles_administradores(id_nivel);
ALTER TABLE tb_administradores ADD CONSTRAINT u_dui_admin UNIQUE(dui_administrador);
ALTER TABLE tb_administradores ADD CONSTRAINT u_correo_admin UNIQUE(correo_administrador);
ALTER TABLE tb_administradores ADD CONSTRAINT u_telefono_admin UNIQUE(telefono_administrador);
ALTER TABLE tb_administradores ADD CONSTRAINT u_alias_admin UNIQUE(alias_administrador);
-----------------------------------

-- categorias de productos
CREATE TABLE tb_categorias_productos(
id_categoria_productos INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
categoria_producto VARCHAR(50) NOT NULL,
imagen_categoria VARCHAR(100) NOT NULL
);

-- productos
CREATE TABLE tb_productos(
id_producto INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_administrador INT NOT NULL,
id_categoria_productos INT NOT NULL,
nombre_producto VARCHAR(50) NOT NULL,
descripcion_producto VARCHAR(250) NOT NULL,
precio_producto NUMERIC(8,2) NOT NULL,
imagen_producto VARCHAR(100) NOT NULL,
estado_producto ENUM("En venta", "No disponible") NOT NULL,
existencias_producto INT NOT NULL,
fecha_registro DATE NOT NULL default NOW(),
descuento_producto DECIMAL(4,2) NULL
);

-- restricciones de productos
ALTER TABLE tb_productos ADD CONSTRAINT fk_admin_productos FOREIGN KEY(id_administrador) REFERENCES tb_administradores(id_administrador);
ALTER TABLE tb_productos ADD CONSTRAINT fk_cat_productos FOREIGN KEY (id_categoria_productos) REFERENCES tb_categorias_productos(id_categoria_productos);
ALTER TABLE tb_productos ADD CONSTRAINT ch_precio CHECK(precio_producto > 0);
ALTER TABLE tb_productos ADD CONSTRAINT ch_existencias CHECK(existencias_producto >= 0);
ALTER TABLE tb_productos ADD CONSTRAINT ch_descuento CHECK(descuento_producto < 100);
--------------------------------

-- staff, o personal, de la academia
CREATE TABLE tb_staffs(
id_staff INT PRIMARY KEY NOT NULL PRIMARY KEY,
nombre_staff VARCHAR(100) NOT NULL,
apellido_staff VARCHAR(100) NOT NULL,
descripcion_extra VARCHAR(500) NOT NULL
);


-- categorias de alumnos
CREATE TABLE tb_categorias_alumnos(
id_categoria_alumno INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
categoria VARCHAR(30) NOT NULL,
edad_maxima INT, -- Edad máxima para estar en una categoría
horario_entrenamiento VARCHAR(200) NOT NULL
);

CREATE TABLE tb_staffs_categorias(
id_staff_categorias INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
id_staff INT NOT NULL,
id_categoria_alumno INT NOT NULL
);

ALTER TABLE tb_staffs_categorias ADD CONSTRAINT fk_staff_cate FOREIGN KEY (id_staff) REFERENCES tb_staffs(id_staff);
ALTER TABLE tb_staffs_categorias ADD CONSTRAINT fk_cate_cate FOREIGN KEY (id_categoria_alumno) REFERENCES tb_categorias_alumnos(id_categoria_alumno);

-- alumnos
CREATE TABLE tb_alumnos(
id_alumno INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nombre_alumno VARCHAR(100) NOT NULL,
apellido_alumno VARCHAR(100) NOT NULL,
fecha_nacimiento DATE NOT NULL DEFAULT NOW(),
posicion_alumno ENUM('Portero', 'Jugador de campo') NOT NULL,
id_staff_categorias INT NOT NULL, -- La categoría se asignará dependiendo la edad del alumno
estado_alumno ENUM('Activo', 'Inactivo') NOT NULL DEFAULT('Activo')
);

ALTER TABLE tb_alumnos ADD CONSTRAINT fk_alumno_categoria FOREIGN KEY(id_staff_categorias) REFERENCES tb_staffs_categorias(id_staff_categorias);

-- clientes de la tienda en linea
CREATE TABLE tb_clientes(
id_cliente INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
nombre_cliente VARCHAR(50) NOT NULL,
apellido_cliente VARCHAR(50) NOT NULL,
dui_cliente VARCHAR(10) NOT NULL,
correo_cliente VARCHAR(100) NOT NULL,
telefono_cliente varchar(9) NOT NULL,
direccion_cliente VARCHAR(250) NOT NULL,
clave_cliente VARCHAR(100) NOT NULL,
estado_cliente ENUM("Activo", "Inactivo") NOT NULL DEFAULT("Inactivo"),
fecha_registro DATE NOT NULL default NOW(),
foto_cliente VARCHAR(200) NULL
);

-- restricciones de clientes
ALTER TABLE tb_clientes ADD CONSTRAINT u_dui_cliente UNIQUE(dui_cliente);
ALTER TABLE tb_clientes ADD CONSTRAINT u_correo_cliente UNIQUE(correo_cliente);
ALTER TABLE tb_clientes ADD CONSTRAINT u_telefono_cliente UNIQUE(telefono_cliente);
------------------------------

-- ordenes que se realicen
CREATE TABLE tb_compras(
id_compra INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_cliente INT NOT NULL,
estado_compra ENUM("Entregada", "Anulada", "Finalizada", "Pendiente") NOT NULL,
fecha_registro DATE NOT NULL DEFAULT NOW(),
direccion_compra VARCHAR(250) NOT NULL
);

ALTER TABLE tb_compras ADD CONSTRAINT fk_pedido_cliente FOREIGN KEY(id_cliente) REFERENCES tb_clientes(id_cliente);


-- detalles de cada orden
CREATE TABLE tb_detalles_compras(
id_detalle_compra INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_compra INT NOT NULL,
id_producto INT NOT NULL,
cantidad_producto INT NOT NULL,
total_a_pagar DECIMAL(5,2) NOT NULL
);

-- restricciones de detalles compras
ALTER TABLE tb_detalles_compras ADD CONSTRAINT fk_orden_detalle FOREIGN KEY(id_compra) REFERENCES tb_compras(id_compra);
ALTER TABLE tb_detalles_compras ADD CONSTRAINT fk_orden_productos FOREIGN KEY (id_producto) REFERENCES tb_productos(id_producto);
ALTER TABLE tb_detalles_compras ADD CONSTRAINT ch_cantidadP CHECK(cantidad_producto > 0);
ALTER TABLE tb_detalles_compras ADD CONSTRAINT ch_totalPa CHECK(total_a_pagar > 0);
-------------------------------------


-- valoracion de los productos comprados
CREATE TABLE tb_valoraciones(
id_valoracion INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_detalle_compra INT NOT NULL,
calificacion_producto INT NULL,
comentario_producto varchar(250) NULL,
fecha_valoracion DATE NOT NULL DEFAULT NOW(),
estado_comentario ENUM("Habilitado", "Deshabilitado") NOT NULL
);

ALTER TABLE tb_valoraciones ADD CONSTRAINT fk_orden_valoracion FOREIGN KEY (id_detalle_compra) REFERENCES tb_detalles_compras(id_detalle_compra);
ALTER TABLE tb_valoraciones ADD CONSTRAINT ch_valoracion CHECK(calificacion_producto < 6); -- la mayor calificación será 5

-- mensualidades
-- tabla para relacionar si un cliente posee un alumno registrado
CREATE TABLE tb_alumnos_clientes(
id_alumno_cliente INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_cliente INT NOT NULL,
id_alumno INT NOT NULL
);

ALTER TABLE tb_alumnos_clientes ADD CONSTRAINT fk_cliente_alumno FOREIGN KEY(id_cliente) REFERENCES tb_clientes(id_cliente);
ALTER TABLE tb_alumnos_clientes ADD CONSTRAINT fk_alumno_alumno FOREIGN KEY(id_alumno) REFERENCES tb_alumnos(id_alumno);


-- pagos de mensualidad
CREATE TABLE tb_pagos(
id_pago INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
fecha_pago DATE NOT NULL DEFAULT NOW(),
mensualidad_a_pagar NUMERIC(8, 2) NOT NULL,
cuotas_anuales INT NOT NULL DEFAULT 12,
cuotas_pendientes INT NOT NULL,
id_alumno_cliente INT NOT NULL -- hará referencia al cliente que realizará el pago del alumno
);

ALTER TABLE tb_pagos ADD CONSTRAINT Fk_cliente_pago FOREIGN KEY (id_alumno_cliente) REFERENCES tb_alumnos_clientes(id_alumno_cliente);
ALTER TABLE tb_pagos ADD CONSTRAINT ch_cuotasAn CHECK(cuotas_anuales > 0);
ALTER TABLE tb_pagos ADD CONSTRAINT cuotasPe CHECK(cuotas_pendientes > 0);

-- detalles de cada pago
CREATE TABLE tb_detalles_pagos(
id_detalle_pago INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
id_pago INT NOT NULL,
total_pagado NUMERIC (8, 2) NOT NULL,
descripcion_pago VARCHAR(200) NOT NULL DEFAULT('Pago de mensualidad'),
fecha_proximo_pago DATE NOT NULL,
estado_pago ENUM('Pagado', 'Pendiente de pago') NOT NULL
);

ALTER TABLE tb_detalles_pagos ADD CONSTRAINT Fk_detalle_pago FOREIGN KEY (id_pago) REFERENCES tb_pagos(id_pago);
ALTER TABLE tb_detalles_pagos ADD CONSTRAINT ch_totalPa CHECK(total_pagado > 0);

-- soporte tecnico
CREATE TABLE tb_soporte_tecnico(
id_soporte INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
mensaje VARCHAR(2000) NOT NULL,
fecha_envio DATE NOT NULL DEFAULT NOW(),
estado_mensaje ENUM('Pendiente', 'Visto', 'Atendido') NOT NULL,
id_cliente INT NOT NULL
);

ALTER TABLE tb_soporte_tecnico ADD CONSTRAINT Fk_cliente_soporte FOREIGN KEY (id_cliente) REFERENCES tb_clientes(id_cliente);

---------------------------------------------------------------------------------
-- triggers

-- trigger para actualizar las existencias de los productos
DELIMITER //
CREATE TRIGGER actualizar_existencias_detalle
AFTER INSERT ON tb_detalles_compras
FOR EACH ROW
BEGIN
UPDATE tb_productos SET existencias_producto = existencias_producto - NEW.cantidad_producto
WHERE id_producto = NEW.id_producto;
END
//
DELIMITER ;

-- trigger para actualizar las cuotas pendientes de la mensualidad
DELIMITER //

CREATE TRIGGER actualizar_cuotas_pendientes
AFTER INSERT ON	tb_detalles_pagos
FOR EACH ROW
BEGIN
UPDATE tb_pagos set cuotas_pendientes = cuotas_pendientes - 1
WHERE id_pago = NEW.id_pago;
END
//
DELIMITER ;

------------------------------------------------------------------------------------------------
-- procedimiento almacenado

-- Procedimiento almacenado para devolucion de productos
DELIMITER //

CREATE PROCEDURE devolucion_producto(
    IN id_detalle_in INT,
    IN nueva_cantidad INT
)
BEGIN
    DECLARE producto_id INT;
    DECLARE cantidad_devuelta INT;
    
    -- Obtener el ID del producto y la cantidad devuelta del detalle del pedido
    SELECT id_producto, cantidad_producto INTO producto_id, cantidad_devuelta
    FROM tb_detalles_compras
    WHERE id_detalle = id_detalle_in;
    
    -- Actualizar la cantidad en la tabla de productos
    UPDATE tb_productos
    SET existencias_producto = existencias_producto + (cantidad_devuelta - nueva_cantidad)
    WHERE id_producto = producto_id;
    
    -- Actualizar la cantidad en el detalle del pedido
    UPDATE tb_detalles_compras
    SET cantidad_producto = nueva_cantidad
    WHERE id_detalle = id_detalle_in;
    
    
END

-----------------------------------------------------------------------------------------------------------------
-- funcion

-- funcion para calcular el total a pagar en una compra

DELIMITER //

CREATE FUNCTION calcular_total_compra(
    orden_id INT
)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total DECIMAL(10, 2);
    
    SELECT SUM(total_a_pagar) INTO total -- Calcula la suma de total_a_pagar para todas las filas en tb_detalles_ordenes con el orden_id dado
    FROM tb_detalles_compras
    WHERE id_orden = orden_id;
    
    RETURN COALESCE(total, 0); -- Devuelve el total calculado. Se utiliza COALESCE para manejar el caso donde no se encuentran filas, devolviendo 0 en ese caso
END
//
DELIMITER ;




show tables;

select * from tb_administradores;
select * from tb_alumnos;
select * from tb_alumnos_clientes;
select * from tb_categorias_alumnos;
select * from tb_categorias_productos;
select * from tb_staffs_categorias;
select * from tb_clientes;
select * from tb_detalles_compras;
select * from tb_detalles_pagos;
select * from tb_niveles_administradores;
select * from tb_compras;
select * from tb_pagos;
select * from tb_productos;
select * from tb_soporte_tecnico;
select * from tb_staffs;
select * from tb_valoraciones;
